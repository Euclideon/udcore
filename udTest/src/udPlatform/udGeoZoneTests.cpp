#include "gtest/gtest.h"
#include "udGeoZone.h"

// Don't forget to read this PDF!- http://www.epsg.org/Portals/0/373-07-2.pdf

TEST(udGeoZoneTests, Init)
{
  // Ensure all fields are initialised
  udGeoZone zone1, zone2;

  memset(&zone1, 0x55, sizeof(zone1));
  memset(&zone2, 0xaa, sizeof(zone1));

  udGeoZone_SetFromSRID(&zone1, 32756);
  udGeoZone_SetFromSRID(&zone2, 32756);
  EXPECT_EQ(0, memcmp(&zone1, &zone2, sizeof(zone1)));
}

TEST(udGeoZoneTests, FindSRID)
{
  udResult result;
  int32_t sridCode;

  result = udGeoZone_FindSRID(&sridCode, udDouble3::create(153, 42, 0), true);
  EXPECT_EQ(udR_Success, result);
  EXPECT_EQ(32656, sridCode);

  for (double lon = -180.0; lon < 180; ++lon)
  {
    for (double lat = -45.0; lat <= 45; lat += 45)
    {
      udGeoZone zone;

      result = udGeoZone_FindSRID(&sridCode, udDouble3::create(lat, lon, 0));
      EXPECT_EQ(udR_Success, result);
      result = udGeoZone_SetFromSRID(&zone, sridCode);
      EXPECT_EQ(udR_Success, result);
      EXPECT_TRUE(lat >= zone.latLongBoundMin.x);
      EXPECT_TRUE(lat <= zone.latLongBoundMax.x);
      EXPECT_TRUE(lon >= zone.latLongBoundMin.y);
      EXPECT_TRUE(lon <= zone.latLongBoundMax.y);
    }
  }
}

TEST(udGeoZoneTests, RoundTripPrecision)
{
  udGeoZone zone;
  int64_t testPrecision = 100000000;
  int64_t localPrecision = 1;

  struct udGZTestInput
  {
    int32_t srid;
    double latitude;
    double longitude;
  };

  udGZTestInput data[] = {
    { 32756, -29.013435591336, 152.46461046582 },
    { 2285, 47.869421767328, -121.02374445344 },
    { 2285, 47.86900408566, -124.56927806139 },
    { 2771, 33.506796258583, -116.05780332653 },
    { 2771, 32.914105550772, -115.42966896127 },
    { 2238, 30.119412462227, -85.432053878903 },
    { 3949, 48.93793227151, 1.0107421875 },
    { 2285, 48.261566162109, -118.88442993164 },
    { 2285, 48.606262207031, -117.52075195313 },
    { 32756, -66.280516237021, 153.00181113163 },
    { 32756, -21.919611308953, 142.35533595086 },
    { 32756, -42.284585972703, 173.02903848714 },
    { 26910, 52.811011948165, -123.11526606218 },
    { 26910, 35.537093649874, -122.04241991043 },
    { 32655, 69.02553236112, 147.18853443861 },
    { 32655, 81.790122721387, 146.94860787551 },

    { 28350, -33.5338767941, 115.00626123502 },
    { 28350, -41.953243413307, 146.54738222308 },
    { 28350, -70.463470357348, 119.69509496061 },

    { 3112, -29.013435591336, 152.46461046582 },
    //{ 27700, 52.7545342, 0.2885422 }, // This test fails. See udGeoZone.OSGB below for a specific test for 27700 dataset, the InaccuracyScalar should be increased to 1.0 for this line to work
  };

  for (size_t i = 0; i < UDARRAYSIZE(data); ++i)
  {
    EXPECT_EQ(udR_Success, udGeoZone_SetFromSRID(&zone, data[i].srid));

    udDouble3 latLong = udDouble3::create(data[i].latitude, data[i].longitude, 0.f);
    udDouble3 cartesian = udGeoZone_ToCartesian(zone, latLong);
    udDouble3 latLong2 = udGeoZone_ToLatLong(zone, cartesian);

    udDouble3 longLat = udDouble3::create(data[i].longitude, data[i].latitude, 0.f);
    udDouble3 cartesian2 = udGeoZone_ToCartesian(zone, longLat, true);
    udDouble3 longLat2 = udGeoZone_ToLatLong(zone, cartesian, true);

    EXPECT_EQ(int64_t(latLong.x * testPrecision), int64_t(latLong2.x * testPrecision)) << "PointSet:" << i << ", SRID:" << data[i].srid;
    EXPECT_EQ(int64_t(latLong.y * testPrecision), int64_t(latLong2.y * testPrecision)) << "PointSet:" << i << ", SRID:" << data[i].srid;

    EXPECT_EQ(int64_t(longLat.x * testPrecision), int64_t(longLat2.x * testPrecision)) << "PointSet:" << i << ", SRID:" << data[i].srid;
    EXPECT_EQ(int64_t(longLat.y * testPrecision), int64_t(longLat2.y * testPrecision)) << "PointSet:" << i << ", SRID:" << data[i].srid;

    EXPECT_EQ(int64_t(cartesian.x * localPrecision), int64_t(cartesian2.x * localPrecision)) << "PointSet:" << i << ", SRID:" << data[i].srid;
    EXPECT_EQ(int64_t(cartesian.y * localPrecision), int64_t(cartesian2.y * localPrecision)) << "PointSet:" << i << ", SRID:" << data[i].srid;
  }
}

TEST(udGeoZone, SouthernHemisphereLCC_GDA94)
{
  // 3112 - GDA94
  udGeoZone zone;

  const int64_t angularPrecision = 1 * 60 * 60; // 60x60 to get to arc seconds
  const int64_t localPrecision = 1; // 1m

  EXPECT_EQ(udR_Success, udGeoZone_SetFromSRID(&zone, 3112));

  // spatialreference conversions
  const udDouble3 expectedLatLongs[] = { //WGS84
    udDouble3::create(-28.0386128, 153.2827519, 0), // Lake Advancement
    udDouble3::create(-29.014848, 134.7520264, 0), // Coober Pedy
    udDouble3::create(-22.6979855, 116.2332262, 0) // Wyloo Station
  };

  const udDouble3 expectedLocalSpaces[] = {
    udDouble3::create(1865670.94, -3317869.21, 0.0),
    udDouble3::create(72407.23, -3281573.42, 0.0),
    udDouble3::create(-1802424.68, -2717219.62, 0.0)
  };

  udDouble3 latLong, localSpace;

  // The ordering for the tests in this loop is important- if 27700-4277 or 4326-4277 aren't accurate the last one can't be either
  for (size_t i = 0; i < UDARRAYSIZE(expectedLatLongs); ++i)
  {
    localSpace = udGeoZone_ToCartesian(zone, expectedLatLongs[i]);
    latLong = udGeoZone_ToLatLong(zone, expectedLocalSpaces[i]);

    EXPECT_EQ(int64_t(udRound(expectedLatLongs[i].x * angularPrecision)), int64_t(udRound(latLong.x * angularPrecision))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLatLongs[i].y * angularPrecision)), int64_t(udRound(latLong.y * angularPrecision))) << "PointSet:" << i;

    EXPECT_EQ(int64_t(udRound(expectedLocalSpaces[i].x * localPrecision)), int64_t(udRound(localSpace.x * localPrecision))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLocalSpaces[i].y * localPrecision)), int64_t(udRound(localSpace.y * localPrecision))) << "PointSet:" << i;
  }
}

TEST(udGeoZone, OSGB)
{
  // 27700 - UK
  udGeoZone zone;

  const int64_t angularPrecision = 20 * 60 * 60; // 20 arc seconds
  const int64_t localPrecision = 1; // 1m (OSGB is 2m)

  const double wgs84osgbInaccuracyScalar = 0.001; // This scalar is required because we have inaccuracies in our datum shift.

  EXPECT_EQ(udR_Success, udGeoZone_SetFromSRID(&zone, 27700));

  // spatialreference conversions
  const udDouble3 expectedLatLongs[] = { //WGS84
    udDouble3::create(52.7545342, 0.2885422, 0),
    udDouble3::create(52.7545342, -0.2885422, 0),
    udDouble3::create(52.6575703, 1.7179216, 0),
    udDouble3::create(50.5, 0.5, 0)
  };

  const udDouble3 expectedLatLongsOSGB[] = { //OSGB1936
    udDouble3::create(52.754162, 0.2902503, 0),
    udDouble3::create(52.7541713, -0.2869015, 0),
    udDouble3::create(52.6571619, 1.7197914, 0),
    udDouble3::create(50.4993633, 0.5016361, 0)

  };

  const udDouble3 expectedLocalSpaces[] = {
    udDouble3::create(554545.29, 319891.21, 0.0),
    udDouble3::create(515602.872850, 318808.790309, 0.0),
    udDouble3::create(651538.64, 313138.40, 0.0),
    udDouble3::create(577393.37, 69673.62, 0.0)
  };

  udDouble3 latLong, localSpace;

  // The ordering for the tests in this loop is important- if 27700-4277 or 4326-4277 aren't accurate the last one can't be either
  for (size_t i = 0; i < UDARRAYSIZE(expectedLatLongs); ++i)
  {
    // 27700 (British National Grid) <-> 4277 (OSGB1936)
    localSpace = udGeoZone_ToCartesian(zone, expectedLatLongsOSGB[i], false, udGZGD_OSGB36);
    latLong = udGeoZone_ToLatLong(zone, expectedLocalSpaces[i], false, udGZGD_OSGB36);

    EXPECT_EQ(int64_t(udRound(expectedLatLongsOSGB[i].x * angularPrecision)), int64_t(udRound(latLong.x * angularPrecision))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLatLongsOSGB[i].y * angularPrecision)), int64_t(udRound(latLong.y * angularPrecision))) << "PointSet:" << i;

    EXPECT_EQ(int64_t(udRound(expectedLocalSpaces[i].x * localPrecision)), int64_t(udRound(localSpace.x * localPrecision))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLocalSpaces[i].y * localPrecision)), int64_t(udRound(localSpace.y * localPrecision))) << "PointSet:" << i;

    // 4326 (WGS84) <-> 4277 (OSGB1936)
    latLong = udGeoZone_ConvertDatum(expectedLatLongsOSGB[i], udGZGD_OSGB36, udGZGD_WGS84);
    localSpace = udGeoZone_ConvertDatum(expectedLatLongs[i], udGZGD_WGS84, udGZGD_OSGB36);

    EXPECT_EQ(int64_t(udRound(expectedLatLongs[i].x * angularPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(latLong.x * angularPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLatLongs[i].y * angularPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(latLong.y * angularPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;

    EXPECT_EQ(int64_t(udRound(expectedLatLongsOSGB[i].x * angularPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(localSpace.x * angularPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLatLongsOSGB[i].y * angularPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(localSpace.y * angularPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;

    // 27700 (British National Grid) <-> 4326 (WGS84)
    localSpace = udGeoZone_ToCartesian(zone, expectedLatLongs[i]);
    latLong = udGeoZone_ToLatLong(zone, expectedLocalSpaces[i]);

    EXPECT_EQ(int64_t(udRound(expectedLatLongs[i].x * angularPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(latLong.x * angularPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLatLongs[i].y * angularPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(latLong.y * angularPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;

    EXPECT_EQ(int64_t(udRound(expectedLocalSpaces[i].x * localPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(localSpace.x * localPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(expectedLocalSpaces[i].y * localPrecision * wgs84osgbInaccuracyScalar)), int64_t(udRound(localSpace.y * localPrecision * wgs84osgbInaccuracyScalar))) << "PointSet:" << i;
  }
}

TEST(udGeoZone, ChangingCRSDatums)
{
  const udDouble3 latLongPairs[] = {
    { -21.1662907, 149.1603855, 0.0 }, // udGZGD_WGS84 / EPSG:4326
    { -21.1659057, 149.1591458, 0.0 }, // udGZGD_ED50 / EPSG:4230
    { -21.1659055, 149.1591458, 0.0 }, // udGZDD_ETRS89 / EPSG:4258
    { -21.168798, 149.1617787, 0.0 }, // udGZGD_Ireland1975 / EPSG:4300
    { -21.1662907, 149.1603855, 0.0 }, // udGZGD_NAD27 /EPSG:4267
    { -21.1662907, 149.1603855, 0.0 }, // udGZGD_NAD83 /EPSG:4269
    { -21.171477, 149.1590602, 0.0 }, // udGZGD_NTF / EPSG:4275
    { -21.1690001, 149.1613207, 0.0 }, // udGZGD_OSGB36 / EPSG:4277
    { -21.1662907, 149.1603855, 0.0 }, // udGZGD_Potsdam / EPSG:4746
    { -21.17287696, 149.16385735, 0.0 }, // udGZGD_TokyoJapan / EPSG:7414
    { -21.1663274, 149.1602316, 0.0 }, // udGZGD_WGS72 / EPSG:4322
  };

  UDCOMPILEASSERT(UDARRAYSIZE(latLongPairs) == udGZGD_Count, "Please Update the Datums!");

  const int64_t accuracy = 10; //TODO: Get this accuracy _way_ up. >1000 is expected

  for (int i = 0; i < udGZGD_Count; ++i) // First iteration will convert 84 to 84 to confirm it works
  {
    udDouble3 wgs84Result = udGeoZone_ConvertDatum(latLongPairs[i], (udGeoZoneGeodeticDatum)i, udGZGD_WGS84);
    EXPECT_EQ(int64_t(udRound(latLongPairs[0].x * accuracy)), int64_t(udRound(wgs84Result.x * accuracy))) << "Iter" << i;
    EXPECT_EQ(int64_t(udRound(latLongPairs[0].y * accuracy)), int64_t(udRound(wgs84Result.y * accuracy))) << "Iter" << i;

    udDouble3 curIResult = udGeoZone_ConvertDatum(latLongPairs[0], udGZGD_WGS84, (udGeoZoneGeodeticDatum)i);
    EXPECT_EQ(int64_t(udRound(latLongPairs[i].x * accuracy)), int64_t(udRound(curIResult.x * accuracy))) << "PointSet:" << i;
    EXPECT_EQ(int64_t(udRound(latLongPairs[i].y * accuracy)), int64_t(udRound(curIResult.y * accuracy))) << "PointSet:" << i;
  }
}

const udDouble2 goldDataLatLong[] = { { 85, -60 },{ 85, -50 },{ 85, -40 },{ 85, -30 },{ 85, -20 },{ 85, -10 },{ 85, 0 },{ 85, 10 },{ 85, 20 },{ 85, 30 },{ 85, 40 },{ 85, 50 },{ 85, 60 },{ 75, -60 },{ 75, -50 },{ 75, -40 },{ 75, -30 },{ 75, -20 },{ 75, -10 },{ 75, 0 },{ 75, 10 },{ 75, 20 },{ 75, 30 },{ 75, 40 },{ 75, 50 },{ 75, 60 },{ 60, -60 },{ 60, -55 },{ 60, -50 },{ 60, -45 },{ 60, -40 },{ 60, -35 },{ 60, -30 },{ 60, -25 },{ 60, -20 },{ 60, -15 },{ 60, -10 },{ 60, -5 },{ 60, 0 },{ 60, 5 },{ 60, 10 },{ 60, 15 },{ 60, 20 },{ 60, 25 },{ 60, 30 },{ 60, 35 },{ 60, 40 },{ 60, 45 },{ 60, 50 },{ 60, 55 },{ 60, 60 },{ 45, -60 },{ 45, -50 },{ 45, -40 },{ 45, -30 },{ 45, -20 },{ 45, -10 },{ 45, 0 },{ 45, 0.125 },{ 45, 0.25 },{ 45, 0.5 },{ 45, 1 },{ 45, 2 },{ 45, 3 },{ 45, 5 },{ 45, 10 },{ 45, 15 },{ 45, 20 },{ 45, 25 },{ 45, 30 },{ 45, 35 },{ 45, 40 },{ 45, 45 },{ 45, 50 },{ 45, 55 },{ 45, 60 },{ 30, -60 },{ 30, -50 },{ 30, -40 },{ 30, -30 },{ 30, -20 },{ 30, -10 },{ 30, 0 },{ 30, 5 },{ 30, 10 },{ 30, 15 },{ 30, 20 },{ 30, 25 },{ 30, 30 },{ 30, 35 },{ 30, 40 },{ 30, 45 },{ 30, 50 },{ 30, 55 },{ 30, 57 },{ 30, 58 },{ 30, 59 },{ 30, 59.25 },{ 30, 59.50 },{ 30, 59.75 },{ 30, 60 },{ 0, -60 },{ 0, -58 },{ 0, -56 },{ 0, -54 },{ 0, -52 },{ 0, -50 },{ 0, -48 },{ 0, -46 },{ 0, -44 },{ 0, -42 },{ 0, -40 },{ 0, -38 },{ 0, -36 },{ 0, -34 },{ 0, -32 },{ 0, -30 },{ 0, -28 },{ 0, -26 },{ 0, -24 },{ 0, -22 },{ 0, -20 },{ 0, -18 },{ 0, -16 },{ 0, -14 },{ 0, -12 },{ 0, -10 },{ 0, -8 },{ 0, -6 },{ 0, -4 },{ 0, -2 },{ 0, 0 },{ 0, 2 },{ 0, 4 },{ 0, 6 },{ 0, 8 },{ 0, 10 },{ 0, 12 },{ 0, 14 },{ 0, 16 },{ 0, 18 },{ 0, 20 },{ 0, 22 },{ 0, 24 },{ 0, 26 },{ 0, 28 },{ 0, 30 },{ 0, 32 },{ 0, 34 },{ 0, 36 },{ 0, 38 },{ 0, 40 },{ 0, 42 },{ 0, 44 },{ 0, 46 },{ 0, 48 },{ 0, 50 },{ 0, 52 },{ 0, 54 },{ 0, 56 },{ 0, 58 },{ 0, 60 },{ -60, -60 },{ -60, -55 },{ -60, -50 },{ -60, -45 },{ -60, -40 },{ -60, -35 },{ -60, -30 },{ -60, -25 },{ -60, -20 },{ -60, -15 },{ -60, -10 },{ -60, -5 },{ -60, 0 },{ -60, 5 },{ -60, 10 },{ -60, 15 },{ -60, 20 },{ -60, 25 },{ -60, 30 },{ -60, 35 },{ -60, 40 },{ -60, 45 },{ -60, 50 },{ -60, 55 },{ -60, 60 },{ -85, -60 },{ -85, -50 },{ -85, -40 },{ -85, -30 },{ -85, -20 },{ -85, -10 },{ -85, 0 },{ -85, 10 },{ -85, 20 },{ -85, 30 },{ -85, 40 },{ -85, 50 },{ -85, 60 },{ 88, 0 },{ 86, 0 },{ 84, 0 },{ 82, 0 },{ 80, 0 },{ 78, 0 },{ 76, 0 },{ 74, 0 },{ 72, 0 },{ 70, 0 },{ 68, 0 },{ 66, 0 },{ 64, 0 },{ 62, 0 },{ 60, 0 },{ 58, 0 },{ 56, 0 },{ 54, 0 },{ 52, 0 },{ 50, 0 },{ 48, 0 },{ 46, 0 },{ 44, 0 },{ 42, 0 },{ 40, 0 },{ 38, 0 },{ 36, 0 },{ 34, 0 },{ 32, 0 },{ 30, 0 },{ 28, 0 },{ 26, 0 },{ 24, 0 },{ 22, 0 },{ 20, 0 },{ 18, 0 },{ 16, 0 },{ 14, 0 },{ 12, 0 },{ 10, 0 },{ 8, 0 },{ 6, 0 },{ 4, 0 },{ 2, 0 },{ 0, 0 },{ -2, 0 },{ -4, 0 },{ -6, 0 },{ -8, 0 },{ -10, 0 },{ 88, 60 },{ 86, 60 },{ 84, 60 },{ 82, 60 },{ 80, 60 },{ 78, 60 },{ 76, 60 },{ 74, 60 },{ 72, 60 },{ 70, 60 },{ 68, 60 },{ 66, 60 },{ 64, 60 },{ 62, 60 },{ 60, 60 },{ 58, 60 },{ 56, 60 },{ 54, 60 },{ 52, 60 },{ 50, 60 },{ 48, 60 },{ 46, 60 },{ 44, 60 },{ 42, 60 },{ 40, 60 },{ 38, 60 },{ 36, 60 },{ 34, 60 },{ 32, 60 },{ 30, 60 },{ 28, 60 },{ 26, 60 },{ 24, 60 },{ 22, 60 },{ 20, 60 },{ 18, 60 },{ 16, 60 },{ 14, 60 },{ 12, 60 },{ 10, 60 },{ 8, 60 },{ 6, 60 },{ 4, 60 },{ 2, 60 },{ 0, 60 },{ -2, 60 },{ -4, 60 },{ -6, 60 },{ -8, 60 },{ -10, 60 } };

// TransMerc26 test from GoldData_v6.3 @ http://earth-info.nga.mil/GandG/coordsys/Conversion_Software/index.html
TEST(udGeoZone, GoldData63TransMerc26)
{
  udDouble2 mercData[] = { { -483943.527503, 9722205.338481 },{ -427895.580459, 9642462.065386 },{ -358888.675495, 9573715.084698 },{ -279050.262683, 9518022.200890 },{ -190817.262239, 9477033.459573 },{ -96859.156300, 9451952.297203 },{ 0.000000, 9443510.140666 },{ 96859.156300, 9451952.297203 },{ 190817.262239, 9477033.459573 },{ 279050.262683, 9518022.200890 },{ 358888.675495, 9573715.084698 },{ 427895.580459, 9642462.065386 },{ 483943.527503, 9722205.338481 },{ -1458869.311637, 9149858.816237 },{ -1285565.198612, 8910698.457266 },{ -1074419.247845, 8706672.371011 },{ -832650.960579, 8543094.337698 },{ -567859.299246, 8423785.611430 },{ -287748.836902, 8351262.808936 },{ 0.000000, 8326937.587280 },{ 287748.836902, 8351262.808936 },{ 567859.299246, 8423785.611430 },{ 832650.960579, 8543094.337698 },{ 1074419.247845, 8706672.371011 },{ 1285565.198612, 8910698.457266 },{ 1458869.311637, 9149858.816237 },{ -2964227.090765, 8205251.234407 },{ -2782064.056031, 7957435.773324 },{ -2580653.930717, 7729962.209904 },{ -2362651.685233, 7523798.004299 },{ -2130566.804588, 7339517.432528 },{ -1886712.043039, 7177385.363796 },{ -1633178.735886, 7037439.986987 },{ -1371833.624649, 6919568.522094 },{ -1104331.837754, 6823572.599735 },{ -832141.189888, 6749222.012765 },{ -556573.889131, 6696296.869256 },{ -278822.758856, 6664618.888100 },{ 0.000000, 6654072.819491 },{ 278822.758856, 6664618.888100 },{ 556573.889131, 6696296.869256 },{ 832141.189888, 6749222.012765 },{ 1104331.837754, 6823572.599735 },{ 1371833.624649, 6919568.522094 },{ 1633178.735886, 7037439.986987 },{ 1886712.043039, 7177385.363796 },{ 2130566.804588, 7339517.432528 },{ 2362651.685233, 7523798.004299 },{ 2580653.930717, 7729962.209904 },{ 2782064.056031, 7957435.773324 },{ 2964227.090765, 8205251.234407 },{ -4552797.983219, 7042021.264274 },{ -3874997.468215, 6353771.575090 },{ -3133139.791765, 5826829.612032 },{ -2360791.676704, 5443001.292697 },{ -1576380.787425, 5183546.587965 },{ -788456.442807, 5033847.161114 },{ 0.000000, 4984944.377978 },{ 9855.854400, 4984951.980138 },{ 19711.708879, 4984974.786691 },{ 39423.418384, 4985066.013998 },{ 78846.841653, 4985430.940726 },{ 157693.718217, 4986890.927643 },{ 236540.642358, 4989325.234793 },{ 394234.438810, 4997123.381818 },{ 788456.442807, 5033847.161114 },{ 1182582.362270, 5095676.477878 },{ 1576380.787425, 5183546.587965 },{ 1969385.344968, 5298764.994976 },{ 2360791.676704, 5443001.292697 },{ 2749334.151719, 5618260.797473 },{ 3133139.791765, 5826829.612032 },{ 3509561.102920, 6071173.921846 },{ 3874997.468215, 6353771.575090 },{ 4224728.010175, 6676851.570206 },{ 4552797.983219, 7042021.264274 },{ -6210906.900160, 5455136.341724 },{ -5100884.293138, 4652262.781639 },{ -4009728.397901, 4101640.403114 },{ -2959830.261718, 3731566.523691 },{ -1949320.326404, 3494725.886266 },{ -967326.622891, 3362593.789817 },{ 0.000000, 3320113.397940 },{ 482739.761374, 3330662.065311 },{ 967326.622891, 3362593.789817 },{ 1455590.738883, 3416780.562222 },{ 1949320.326404, 3494725.886266 },{ 2450218.798188, 3598642.627884 },{ 2959830.261718, 3731566.523691 },{ 3479412.822009, 3897507.894394 },{ 4009728.397901, 4101640.403114 },{ 4550702.122779, 4350515.050072 },{ 5100884.293138, 4652262.781639 },{ 5656629.042264, 5016697.591669 },{ 5879057.348553, 5182521.093137 },{ 5990007.092138, 5270111.030646 },{ 6100658.157988, 5360950.158381 },{ 6128262.329125, 5384179.105403 },{ 6155839.688010, 5407618.771574 },{ 6183388.477643, 5431270.678047 },{ 6210906.900160, 5455136.341724 },{ -8423099.473515, 0.000000 },{ -7986550.230016, 0.000000 },{ -7574316.703085, 0.000000 },{ -7183343.494858, 0.000000 },{ -6811084.435548, 0.000000 },{ -6455393.148674, 0.000000 },{ -6114441.581589, 0.000000 },{ -5786658.285436, 0.000000 },{ -5470680.926552, 0.000000 },{ -5165319.237408, 0.000000 },{ -4869525.747989, 0.000000 },{ -4582372.398706, 0.000000 },{ -4303031.656552, 0.000000 },{ -4030761.119143, 0.000000 },{ -3764890.848480, 0.000000 },{ -3504812.861291, 0.000000 },{ -3249972.337647, 0.000000 },{ -2999860.209058, 0.000000 },{ -2754006.861562, 0.000000 },{ -2511976.745296, 0.000000 },{ -2273363.724682, 0.000000 },{ -2037787.036058, 0.000000 },{ -1804887.744877, 0.000000 },{ -1574325.614256, 0.000000 },{ -1345776.312061, 0.000000 },{ -1118928.895723, 0.000000 },{ -893483.523497, 0.000000 },{ -669149.348267, 0.000000 },{ -445642.555759, 0.000000 },{ -222684.513481, 0.000000 },{ 0.000000, 0.000000 },{ 222684.513481, 0.000000 },{ 445642.555759, 0.000000 },{ 669149.348267, 0.000000 },{ 893483.523497, 0.000000 },{ 1118928.895723, 0.000000 },{ 1345776.312061, 0.000000 },{ 1574325.614256, 0.000000 },{ 1804887.744877, 0.000000 },{ 2037787.036058, 0.000000 },{ 2273363.724682, 0.000000 },{ 2511976.745296, 0.000000 },{ 2754006.861562, 0.000000 },{ 2999860.209058, 0.000000 },{ 3249972.337647, 0.000000 },{ 3504812.861291, 0.000000 },{ 3764890.848480, 0.000000 },{ 4030761.119143, 0.000000 },{ 4303031.656552, 0.000000 },{ 4582372.398706, 0.000000 },{ 4869525.747989, 0.000000 },{ 5165319.237408, 0.000000 },{ 5470680.926552, 0.000000 },{ 5786658.285436, 0.000000 },{ 6114441.581589, 0.000000 },{ 6455393.148674, 0.000000 },{ 6811084.435548, 0.000000 },{ 7183343.494858, 0.000000 },{ 7574316.703085, 0.000000 },{ 7986550.230016, 0.000000 },{ 8423099.473515, 0.000000 },{ -2964227.090765, -8205251.234407 },{ -2782064.056031, -7957435.773324 },{ -2580653.930717, -7729962.209904 },{ -2362651.685233, -7523798.004299 },{ -2130566.804588, -7339517.432528 },{ -1886712.043039, -7177385.363796 },{ -1633178.735886, -7037439.986987 },{ -1371833.624649, -6919568.522094 },{ -1104331.837754, -6823572.599735 },{ -832141.189888, -6749222.012765 },{ -556573.889131, -6696296.869256 },{ -278822.758856, -6664618.888100 },{ 0.000000, -6654072.819491 },{ 278822.758856, -6664618.888100 },{ 556573.889131, -6696296.869256 },{ 832141.189888, -6749222.012765 },{ 1104331.837754, -6823572.599735 },{ 1371833.624649, -6919568.522094 },{ 1633178.735886, -7037439.986987 },{ 1886712.043039, -7177385.363796 },{ 2130566.804588, -7339517.432528 },{ 2362651.685233, -7523798.004299 },{ 2580653.930717, -7729962.209904 },{ 2782064.056031, -7957435.773324 },{ 2964227.090765, -8205251.234407 },{ -483943.527503, -9722205.338481 },{ -427895.580459, -9642462.065386 },{ -358888.675495, -9573715.084698 },{ -279050.262683, -9518022.200890 },{ -190817.262239, -9477033.459573 },{ -96859.156300, -9451952.297203 },{ 0.000000, -9443510.140666 },{ 96859.156300, -9451952.297203 },{ 190817.262239, -9477033.459573 },{ 279050.262683, -9518022.200890 },{ 358888.675495, -9573715.084698 },{ 427895.580459, -9642462.065386 },{ 483943.527503, -9722205.338481 },{ 0.000000, 9778578.687182 },{ 0.000000, 9555197.141480 },{ 0.000000, 9331826.561185 },{ 0.000000, 9108472.360519 },{ 0.000000, 8885139.871937 },{ 0.000000, 8661834.319555 },{ 0.000000, 8438560.793153 },{ 0.000000, 8215324.222895 },{ 0.000000, 7992129.354896 },{ 0.000000, 7768980.727770 },{ 0.000000, 7545882.650267 },{ 0.000000, 7322839.180123 },{ 0.000000, 7099854.104229 },{ 0.000000, 6876930.920205 },{ 0.000000, 6654072.819491 },{ 0.000000, 6431282.672002 },{ 0.000000, 6208563.012457 },{ 0.000000, 5985916.028402 },{ 0.000000, 5763343.550010 },{ 0.000000, 5540847.041684 },{ 0.000000, 5318427.595490 },{ 0.000000, 5096085.926452 },{ 0.000000, 4873822.369715 },{ 0.000000, 4651636.879571 },{ 0.000000, 4429529.030351 },{ 0.000000, 4207498.019154 },{ 0.000000, 3985542.670404 },{ 0.000000, 3763661.442172 },{ 0.000000, 3541852.434256 },{ 0.000000, 3320113.397940 },{ 0.000000, 3098441.747387 },{ 0.000000, 2876834.572604 },{ 0.000000, 2655288.653903 },{ 0.000000, 2433800.477786 },{ 0.000000, 2212366.254172 },{ 0.000000, 1990981.934878 },{ 0.000000, 1769643.233270 },{ 0.000000, 1548345.644978 },{ 0.000000, 1327084.469593 },{ 0.000000, 1105854.833234 },{ 0.000000, 884651.711881 },{ 0.000000, 663469.955375 },{ 0.000000, 442304.311978 },{ 0.000000, 221149.453372 },{ 0.000000, 0.000000 },{ 0.000000, -221149.453372 },{ 0.000000, -442304.311978 },{ 0.000000, -663469.955375 },{ 0.000000, -884651.711881 },{ 0.000000, -1105854.833234 },{ 193478.495744, 9890238.174368 },{ 387070.053266, 9778308.925410 },{ 580887.593439, 9665975.077520 },{ 775043.744138, 9553031.292767 },{ 969650.665433, 9439268.555628 },{ 1164819.839706, 9324472.894622 },{ 1360661.813189, 9208424.058689 },{ 1557285.873746, 9090894.136782 },{ 1754799.647559, 8971646.109077 },{ 1953308.594636, 8850432.318211 },{ 2152915.379650, 8726992.849240 },{ 2353719.090435, 8601053.807452 },{ 2555814.271380, 8472325.484149 },{ 2759289.732889, 8340500.402045 },{ 2964227.090765, 8205251.234407 },{ 3170698.980807, 8066228.595750 },{ 3378766.883776, 7923058.707330 },{ 3588478.484220, 7775340.948452 },{ 3799864.473255, 7622645.315506 },{ 4012934.690389, 7464509.825794 },{ 4227673.483131, 7300437.923867 },{ 4444034.145850, 7129895.976045 },{ 4661932.282425, 6952310.976086 },{ 4881237.922223, 6767068.634161 },{ 5101766.208947, 6573512.085289 },{ 5323266.481326, 6370941.535402 },{ 5545409.580258, 6158615.266273 },{ 5767773.258604, 5935752.547047 },{ 5989825.651007, 5701539.150389 },{ 6210906.900160, 5455136.341724 },{ 6430209.256248, 5195694.390171 },{ 6646756.295488, 4922371.817126 },{ 6859382.370663, 4634361.713402 },{ 7066714.034424, 4330926.453274 },{ 7267155.968366, 4011441.917637 },{ 7458884.868697, 3675451.778875 },{ 7639855.668495, 3322731.344695 },{ 7807825.189291, 2953358.766832 },{ 7960398.439614, 2567789.038934 },{ 8095101.814284, 2166923.285356 },{ 8209484.870500, 1752162.874899 },{ 8301247.860745, 1325435.816676 },{ 8368386.074076, 889182.995388 },{ 8409335.493936, 446295.299669 },{ 8423099.473515, 0.000000 },{ 8409335.493936, -446295.299669 },{ 8368386.074076, -889182.995388 },{ 8301247.860745, -1325435.816676 },{ 8209484.870500, -1752162.874899 },{ 8095101.814284, -2166923.285356 } };

  udGeoZone transMerc = { };
  transMerc.scaleFactor = 1;
  transMerc.meridian = 0;
  transMerc.parallel = 0;
  transMerc.falseNorthing = 0;
  transMerc.falseEasting = 0;
  transMerc.flattening = 1 / 298.257223563;
  transMerc.semiMajorAxis = 6378137.0;
  udGeoZone_SetFromSRID(&transMerc, -1);

  const int64_t angularPrecision = 20 * 60 * 60; // 20 arc seconds
  const int64_t localPrecision = 100; // 1cm

  for (size_t i = 0; i < UDARRAYSIZE(mercData); ++i)
  {
    udDouble3 cartesian = udGeoZone_ToCartesian(transMerc, udDouble3::create(goldDataLatLong[i], 0.0));
    udDouble3 latLong = udGeoZone_ToLatLong(transMerc, udDouble3::create(mercData[i], 0.0));

    EXPECT_EQ(udRound(mercData[i].x * localPrecision), udRound(cartesian.x * localPrecision)) << "PointSet:" << i;
    EXPECT_EQ(udRound(mercData[i].y * localPrecision), udRound(cartesian.y * localPrecision)) << "PointSet:" << i;
    EXPECT_EQ(udRound(goldDataLatLong[i].x * angularPrecision), udRound(latLong.x * angularPrecision)) << "PointSet:" << i;
    EXPECT_EQ(udRound(goldDataLatLong[i].y * angularPrecision), udRound(latLong.y * angularPrecision)) << "PointSet:" << i;
  }
}

// TransMerc26A test in GoldData_v6.3 @ http://earth-info.nga.mil/GandG/coordsys/Conversion_Software/index.html
TEST(udGeoZone, GoldData63TransMerc26A)
{
  udDouble2 mercData[] = { { -483943.527503, 11402091.940540 },{ -427895.580459, 11322348.667445 },{ -358888.675495, 11253601.686758 },{ -279050.262683, 11197908.802950 },{ -190817.262239, 11156920.061633 },{ -96859.156300, 11131838.899262 },{ 0.000000, 11123396.742726 },{ 96859.156300, 11131838.899262 },{ 190817.262239, 11156920.061633 },{ 279050.262683, 11197908.802950 },{ 358888.675495, 11253601.686758 },{ 427895.580459, 11322348.667445 },{ 483943.527503, 11402091.940540 },{ -1458869.311637, 10829745.418297 },{ -1285565.198612, 10590585.059326 },{ -1074419.247845, 10386558.973071 },{ -832650.960579, 10222980.939758 },{ -567859.299246, 10103672.213490 },{ -287748.836902, 10031149.410996 },{ 0.000000, 10006824.189340 },{ 287748.836902, 10031149.410996 },{ 567859.299246, 10103672.213490 },{ 832650.960579, 10222980.939758 },{ 1074419.247845, 10386558.973071 },{ 1285565.198612, 10590585.059326 },{ 1458869.311637, 10829745.418297 },{ -2964227.090765, 9885137.836467 },{ -2782064.056031, 9637322.375383 },{ -2580653.930717, 9409848.811963 },{ -2362651.685233, 9203684.606359 },{ -2130566.804588, 9019404.034588 },{ -1886712.043039, 8857271.965856 },{ -1633178.735886, 8717326.589046 },{ -1371833.624649, 8599455.124153 },{ -1104331.837754, 8503459.201795 },{ -832141.189888, 8429108.614825 },{ -556573.889131, 8376183.471316 },{ -278822.758856, 8344505.490160 },{ 0.000000, 8333959.421550 },{ 278822.758856, 8344505.490160 },{ 556573.889131, 8376183.471316 },{ 832141.189888, 8429108.614825 },{ 1104331.837754, 8503459.201795 },{ 1371833.624649, 8599455.124153 },{ 1633178.735886, 8717326.589046 },{ 1886712.043039, 8857271.965856 },{ 2130566.804588, 9019404.034588 },{ 2362651.685233, 9203684.606359 },{ 2580653.930717, 9409848.811963 },{ 2782064.056031, 9637322.375383 },{ 2964227.090765, 9885137.836467 },{ -4552797.983219, 8721907.866333 },{ -3874997.468215, 8033658.177150 },{ -3133139.791765, 7506716.214091 },{ -2360791.676704, 7122887.894757 },{ -1576380.787425, 6863433.190025 },{ -788456.442807, 6713733.763174 },{ 0.000000, 6664830.980037 },{ 9855.854400, 6664838.582197 },{ 19711.708879, 6664861.388751 },{ 39423.418384, 6664952.616058 },{ 78846.841653, 6665317.542785 },{ 157693.718217, 6666777.529702 },{ 236540.642358, 6669211.836852 },{ 394234.438810, 6677009.983878 },{ 788456.442807, 6713733.763174 },{ 1182582.362270, 6775563.079937 },{ 1576380.787425, 6863433.190025 },{ 1969385.344968, 6978651.597036 },{ 2360791.676704, 7122887.894757 },{ 2749334.151719, 7298147.399533 },{ 3133139.791765, 7506716.214091 },{ 3509561.102920, 7751060.523906 },{ 3874997.468215, 8033658.177150 },{ 4224728.010175, 8356738.172266 },{ 4552797.983219, 8721907.866333 },{ -6210906.900160, 7135022.943784 },{ -5100884.293138, 6332149.383699 },{ -4009728.397901, 5781527.005174 },{ -2959830.261718, 5411453.125751 },{ -1949320.326404, 5174612.488326 },{ -967326.622891, 5042480.391876 },{ 0.000000, 5000000.000000 },{ 482739.761374, 5010548.667371 },{ 967326.622891, 5042480.391876 },{ 1455590.738883, 5096667.164282 },{ 1949320.326404, 5174612.488326 },{ 2450218.798188, 5278529.229944 },{ 2959830.261718, 5411453.125751 },{ 3479412.822009, 5577394.496453 },{ 4009728.397901, 5781527.005174 },{ 4550702.122779, 6030401.652132 },{ 5100884.293138, 6332149.383699 },{ 5656629.042264, 6696584.193729 },{ 5879057.348553, 6862407.695196 },{ 5990007.092138, 6949997.632705 },{ 6100658.157988, 7040836.760440 },{ 6128262.329125, 7064065.707462 },{ 6155839.688010, 7087505.373633 },{ 6183388.477643, 7111157.280106 },{ 6210906.900160, 7135022.943784 },{ -8423099.473515, 1679886.602060 },{ -7986550.230016, 1679886.602060 },{ -7574316.703085, 1679886.602060 },{ -7183343.494858, 1679886.602060 },{ -6811084.435548, 1679886.602060 },{ -6455393.148674, 1679886.602060 },{ -6114441.581589, 1679886.602060 },{ -5786658.285436, 1679886.602060 },{ -5470680.926552, 1679886.602060 },{ -5165319.237408, 1679886.602060 },{ -4869525.747989, 1679886.602060 },{ -4582372.398706, 1679886.602060 },{ -4303031.656552, 1679886.602060 },{ -4030761.119143, 1679886.602060 },{ -3764890.848480, 1679886.602060 },{ -3504812.861291, 1679886.602060 },{ -3249972.337647, 1679886.602060 },{ -2999860.209058, 1679886.602060 },{ -2754006.861562, 1679886.602060 },{ -2511976.745296, 1679886.602060 },{ -2273363.724682, 1679886.602060 },{ -2037787.036058, 1679886.602060 },{ -1804887.744877, 1679886.602060 },{ -1574325.614256, 1679886.602060 },{ -1345776.312061, 1679886.602060 },{ -1118928.895723, 1679886.602060 },{ -893483.523497, 1679886.602060 },{ -669149.348267, 1679886.602060 },{ -445642.555759, 1679886.602060 },{ -222684.513481, 1679886.602060 },{ 0.000000, 1679886.602060 },{ 222684.513481, 1679886.602060 },{ 445642.555759, 1679886.602060 },{ 669149.348267, 1679886.602060 },{ 893483.523497, 1679886.602060 },{ 1118928.895723, 1679886.602060 },{ 1345776.312061, 1679886.602060 },{ 1574325.614256, 1679886.602060 },{ 1804887.744877, 1679886.602060 },{ 2037787.036058, 1679886.602060 },{ 2273363.724682, 1679886.602060 },{ 2511976.745296, 1679886.602060 },{ 2754006.861562, 1679886.602060 },{ 2999860.209058, 1679886.602060 },{ 3249972.337647, 1679886.602060 },{ 3504812.861291, 1679886.602060 },{ 3764890.848480, 1679886.602060 },{ 4030761.119143, 1679886.602060 },{ 4303031.656552, 1679886.602060 },{ 4582372.398706, 1679886.602060 },{ 4869525.747989, 1679886.602060 },{ 5165319.237408, 1679886.602060 },{ 5470680.926552, 1679886.602060 },{ 5786658.285436, 1679886.602060 },{ 6114441.581589, 1679886.602060 },{ 6455393.148674, 1679886.602060 },{ 6811084.435548, 1679886.602060 },{ 7183343.494858, 1679886.602060 },{ 7574316.703085, 1679886.602060 },{ 7986550.230016, 1679886.602060 },{ 8423099.473515, 1679886.602060 },{ -2964227.090765, -6525364.632348 },{ -2782064.056031, -6277549.171264 },{ -2580653.930717, -6050075.607844 },{ -2362651.685233, -5843911.402239 },{ -2130566.804588, -5659630.830469 },{ -1886712.043039, -5497498.761737 },{ -1633178.735886, -5357553.384927 },{ -1371833.624649, -5239681.920034 },{ -1104331.837754, -5143685.997676 },{ -832141.189888, -5069335.410705 },{ -556573.889131, -5016410.267197 },{ -278822.758856, -4984732.286041 },{ 0.000000, -4974186.217431 },{ 278822.758856, -4984732.286041 },{ 556573.889131, -5016410.267197 },{ 832141.189888, -5069335.410705 },{ 1104331.837754, -5143685.997676 },{ 1371833.624649, -5239681.920034 },{ 1633178.735886, -5357553.384927 },{ 1886712.043039, -5497498.761737 },{ 2130566.804588, -5659630.830469 },{ 2362651.685233, -5843911.402239 },{ 2580653.930717, -6050075.607844 },{ 2782064.056031, -6277549.171264 },{ 2964227.090765, -6525364.632348 },{ -483943.527503, -8042318.736421 },{ -427895.580459, -7962575.463326 },{ -358888.675495, -7893828.482639 },{ -279050.262683, -7838135.598831 },{ -190817.262239, -7797146.857514 },{ -96859.156300, -7772065.695143 },{ 0.000000, -7763623.538607 },{ 96859.156300, -7772065.695143 },{ 190817.262239, -7797146.857514 },{ 279050.262683, -7838135.598831 },{ 358888.675495, -7893828.482639 },{ 427895.580459, -7962575.463326 },{ 483943.527503, -8042318.736421 },{ 0.000000, 11458465.289242 },{ 0.000000, 11235083.743540 },{ 0.000000, 11011713.163245 },{ 0.000000, 10788358.962578 },{ 0.000000, 10565026.473996 },{ 0.000000, 10341720.921615 },{ 0.000000, 10118447.395213 },{ 0.000000, 9895210.824954 },{ 0.000000, 9672015.956956 },{ 0.000000, 9448867.329830 },{ 0.000000, 9225769.252327 },{ 0.000000, 9002725.782183 },{ 0.000000, 8779740.706288 },{ 0.000000, 8556817.522265 },{ 0.000000, 8333959.421550 },{ 0.000000, 8111169.274062 },{ 0.000000, 7888449.614517 },{ 0.000000, 7665802.630462 },{ 0.000000, 7443230.152070 },{ 0.000000, 7220733.643744 },{ 0.000000, 6998314.197549 },{ 0.000000, 6775972.528512 },{ 0.000000, 6553708.971775 },{ 0.000000, 6331523.481631 },{ 0.000000, 6109415.632410 },{ 0.000000, 5887384.621214 },{ 0.000000, 5665429.272463 },{ 0.000000, 5443548.044232 },{ 0.000000, 5221739.036316 },{ 0.000000, 5000000.000000 },{ 0.000000, 4778328.349447 },{ 0.000000, 4556721.174664 },{ 0.000000, 4335175.255962 },{ 0.000000, 4113687.079845 },{ 0.000000, 3892252.856231 },{ 0.000000, 3670868.536938 },{ 0.000000, 3449529.835329 },{ 0.000000, 3228232.247037 },{ 0.000000, 3006971.071653 },{ 0.000000, 2785741.435294 },{ 0.000000, 2564538.313940 },{ 0.000000, 2343356.557434 },{ 0.000000, 2122190.914038 },{ 0.000000, 1901036.055432 },{ 0.000000, 1679886.602060 },{ 0.000000, 1458737.148687 },{ 0.000000, 1237582.290082 },{ 0.000000, 1016416.646685 },{ 0.000000, 795234.890179 },{ 0.000000, 574031.768825 },{ 193478.495744, 11570124.776428 },{ 387070.053266, 11458195.527469 },{ 580887.593439, 11345861.679580 },{ 775043.744138, 11232917.894826 },{ 969650.665433, 11119155.157688 },{ 1164819.839706, 11004359.496682 },{ 1360661.813189, 10888310.660748 },{ 1557285.873746, 10770780.738842 },{ 1754799.647559, 10651532.711137 },{ 1953308.594636, 10530318.920271 },{ 2152915.379650, 10406879.451300 },{ 2353719.090435, 10280940.409512 },{ 2555814.271380, 10152212.086208 },{ 2759289.732889, 10020387.004105 },{ 2964227.090765, 9885137.836467 },{ 3170698.980807, 9746115.197810 },{ 3378766.883776, 9602945.309390 },{ 3588478.484220, 9455227.550511 },{ 3799864.473255, 9302531.917566 },{ 4012934.690389, 9144396.427854 },{ 4227673.483131, 8980324.525927 },{ 4444034.145850, 8809782.578104 },{ 4661932.282425, 8632197.578145 },{ 4881237.922223, 8446955.236220 },{ 5101766.208947, 8253398.687349 },{ 5323266.481326, 8050828.137462 },{ 5545409.580258, 7838501.868332 },{ 5767773.258604, 7615639.149107 },{ 5989825.651007, 7381425.752448 },{ 6210906.900160, 7135022.943784 },{ 6430209.256248, 6875580.992230 },{ 6646756.295488, 6602258.419186 },{ 6859382.370663, 6314248.315462 },{ 7066714.034424, 6010813.055334 },{ 7267155.968366, 5691328.519696 },{ 7458884.868697, 5355338.380934 },{ 7639855.668495, 5002617.946754 },{ 7807825.189291, 4633245.368891 },{ 7960398.439614, 4247675.640994 },{ 8095101.814284, 3846809.887415 },{ 8209484.870500, 3432049.476958 },{ 8301247.860745, 3005322.418736 },{ 8368386.074076, 2569069.597447 },{ 8409335.493936, 2126181.901729 },{ 8423099.473515, 1679886.602060 },{ 8409335.493936, 1233591.302390 },{ 8368386.074076, 790703.606672 },{ 8301247.860745, 354450.785383 },{ 8209484.870500, -72276.272839 },{ 8095101.814284, -487036.683296 } };

  udGeoZone transMerc = { };
  transMerc.scaleFactor = 1;
  transMerc.meridian = 0;
  transMerc.parallel = 30;
  transMerc.falseNorthing = 5000000;
  transMerc.falseEasting = 0;
  transMerc.flattening = 1 / 298.257223563;
  transMerc.semiMajorAxis = 6378137.0;
  udGeoZone_SetFromSRID(&transMerc, -1);

  const int64_t angularPrecision = 20 * 60 * 60; // 20 arc seconds
  const int64_t localPrecision = 100; // 1cm

  for (size_t i = 0; i < UDARRAYSIZE(mercData); ++i)
  {
    udDouble3 cartesian = udGeoZone_ToCartesian(transMerc, udDouble3::create(goldDataLatLong[i], 0.0));
    udDouble3 latLong = udGeoZone_ToLatLong(transMerc, udDouble3::create(mercData[i], 0.0));

    EXPECT_EQ(udRound(mercData[i].x * localPrecision), udRound(cartesian.x * localPrecision)) << "PointSet:" << i;
    EXPECT_EQ(udRound(mercData[i].y * localPrecision), udRound(cartesian.y * localPrecision)) << "PointSet:" << i;
    EXPECT_EQ(udRound(goldDataLatLong[i].x * angularPrecision), udRound(latLong.x * angularPrecision)) << "PointSet:" << i;
    EXPECT_EQ(udRound(goldDataLatLong[i].y * angularPrecision), udRound(latLong.y * angularPrecision)) << "PointSet:" << i;
  }
}
