Coding standard for the UD2 repo.




2-space indents, no tabs, camelCase variables, ProperCase function/methods, start pointers with a lower case p (eg void *pBlockData), pointers to pointers have two p's (*ppData).

Be minimal wherever possible.

Use classes sparingly, but where necessary. 
For example, a class can be declared on the stack, a C module cannot. 
Do not use C modules for small utility functionality. 
Do not use a class for a large system that may require platform-specific declarations.

Avoid dependencies unless the avoidance would be counter-productive

Treat accessing memory like it's a hard drive, the hard drive like it's the internet, and the internet like it's the post office.

Allocate memory infrequently, and deal with failures. This means allocating memory in a constuctor is unlikely to be worthwhile.

Prefer udNew to udAlloc. Use udAlloc when you have an amount of memory to allocate, use udNew when you have a type to allocate.
So don't use udNew char[bufferLen], and avoid MyType *p = (MyType*)udAlloc(sizeof(MyType)); // 3 copies of one declaration in 1 line!
The main reason is that things change and udAlloc can succeed and even work for a while when it's actually wrong, whereas 
udNew tends to stick out or fail at compile time.

Exceptions are not used, if you need to ask why then we probably need to sit down and have a longer chat.

STL/Boost - check with lead. Trying to avoid where possible but where memory allocation can be controlled via customer's functions it's ok, but not in interfaces, and not where it carries a lot of baggage.
This not only applies to STL/Boost, but also any 

Keep the code compact, with white-space used to delineate groups of functionally related lines of code

Spaces after key words, not after functions, and no braces on single list ifs, this generates too much 
wasted space in functions leading to relatively small functions now occupying more than a page.

if (condition)
  DoSomething();


Braces for single-line if/else's when the either the if or the else requires them

if (condition)
{
  DoSomething();
}
else
{
  DoOneThing();
  DoAnotherThing();
}

Keep the while from a do-while with it's closing brace so it doesn't look like a while.

do
{
  DoSomething();
} while (condition);


Space after a comma, not around parentheses.

// FunctionCall(a, b);


The asterisk/ampersand to denote a pointer/reference goes with the variable, not the type, no matter how much we might prefer the language creators chose differently.
Do not add spaces after the asterisk/ampersand before the identifier.

void *pMyData, **ppMyData;
void func(const BigStructure &myReference);

Avoid non-const references unless there's a good reason to use them.

Delineate the start of a function/method with a row of stars if it's an API function or dashes if it's an internal function.


// ********************************************************
void PublicAPIFunction()
{
  DoSometingInternal();
}

// --------------------------------------------------------
void DoSometingInternal();


When typedefing to simplify pointers to functions, leave the pointer out so that the declaration still looks like a pointer.
typedef void (CallbackFunc)(int a, int b);
void SetCallback(CallbackFunc *funcPointer);
Forward declare functions for additional safety, for example

static CallbackFunc MyFunction;
void MyFunction(int a, int b)
{
  return a * b;
}


When observing an attractive member of the opposite gender out the window, use discreet but readily identifable terms such as "right turn clyde"

